---

- name: Get current kube components version
  ansible.builtin.slurp:
    src: "{{ kube_base }}/current_version"
  register: slurp_kube_version

- name: Get current helm version
  ansible.builtin.slurp:
    src: "{{ helm_base }}/current_version"
  register: slurp_helm_version

- name: Set kube version fact
  ansible.builtin.set_fact:
    kube_current_version: "{{ slurp_kube_version['content'] | b64decode | trim }}"
    helm_current_version: "{{ slurp_helm_version['content'] | b64decode | trim }}"

- name: Set component installer facts
  ansible.builtin.set_fact:
    helm_installer_path: "{{ helm_base }}/helm-v{{ helm_current_version }}-linux-amd64.tar.gz"

- name: Copy kube bins to path
  ansible.builtin.copy:
    remote_src: true
    src: "{{ kube_base }}/{{ item }}-{{ kube_current_version }}"
    dest: "/usr/local/sbin/{{ item }}"
    mode: '0755'
  loop: "{{ kube_bins }}"
  notify: apiserver-restart

- name: Copy kube-apiserver unit file
  ansible.builtin.template:
    src: 'kube-apiserver.service.j2'
    dest: '/etc/systemd/system/kube-apiserver.service'
    mode: '0644'
  notify:
    - cp-daemon-reload
    - apiserver-restart

- name: Copy encryption config
  ansible.builtin.copy:
    src: encryption-config.yml.aes
    dest: /var/lib/kubernetes/encryption-config.yml
    mode: '0600'
  notify:
    - apiserver-restart


- name: Copy kube-controller-manager unit file
  ansible.builtin.template:
    src: 'kube-controller-manager.service.j2'
    dest: '/etc/systemd/system/kube-controller-manager.service'
    mode: '0644'
  notify:
    - cp-daemon-reload
    - controller-manager-restart

- name: Copy kube-scheduler config file
  ansible.builtin.copy:
    src: 'kube-scheduler.yaml'
    dest: '/etc/kubernetes/kube-scheduler.yaml'
    mode: '0644'
  notify:
    - scheduler-restart

- name: Copy kube-scheduler unit file
  ansible.builtin.template:
    src: 'kube-scheduler.service.j2'
    dest: '/etc/systemd/system/kube-scheduler.service'
    mode: '0644'
  notify:
    - cp-daemon-reload
    - scheduler-restart

- name: Create temporary extraction location
  ansible.builtin.file:
    path: "/tmp/{{ item }}_unarchive"
    state: directory
    mode: '0755'
  loop:
    - helm

- name: Unarchive components
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ item.installer_path }}"
    dest: "/tmp/{{ item.component }}_unarchive"
  loop:
    - component: helm
      installer_path: "{{ helm_installer_path }}"
      current_version: "{{ helm_current_version }}"

- name: Copy unarchived helm bin to path
  ansible.builtin.copy:
    remote_src: true
    src: "/tmp/helm_unarchive/linux-amd64/{{ item }}"
    dest: "/usr/local/sbin/{{ item }}"
    mode: '0755'
  loop: "{{ helm_bins }}"

- name: Cleanup unarchive dirs
  ansible.builtin.file:
    path: "/tmp/{{ item }}_unarchive"
    state: absent
  loop:
    - helm

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Install keepalived
  ansible.builtin.dnf:
    name: keepalived
    state: present
  tags:
    - ka
    - keepalive
    - keepalived

- name: Copy keepalived config
  ansible.builtin.template:
    src: keepalived.conf.j2
    dest: /etc/keepalived/keepalived.conf
    mode: '0644'
  tags:
    - ka
    - keepalive
    - keepalived
  notify:
    - keepalived-restart

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
