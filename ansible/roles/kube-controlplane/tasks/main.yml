---

- name: Get target kube components version
  ansible.builtin.slurp:
    src: "{{ kube_base }}/current_version"
  register: slurp_kube_version

- name: Set kube version fact
  ansible.builtin.set_fact:
    kube_target_version: "{{ slurp_kube_version['content'] | b64decode | trim }}"
    
- name: Get kube installed version if present
  ansible.builtin.shell: test -f /usr/local/sbin/kube-apiserver && /usr/local/sbin/kube-apiserver --version | head -n1 | awk '{print $2}' | sed 's/^v//'
  register: kube_installed_version
  ignore_errors: true

- name: Copy kube-apiserver unit file
  ansible.builtin.template:
    src: 'kube-apiserver.service.j2'
    dest: '/etc/systemd/system/kube-apiserver.service'
    mode: '0644'
  notify:
    - cp-daemon-reload
    - apiserver-restart

- name: Copy encryption config
  ansible.builtin.copy:
    src: encryption-config.yml.aes
    dest: /var/lib/kubernetes/encryption-config.yml
    mode: '0600'
  notify:
    - apiserver-restart


- name: Copy kube-controller-manager unit file
  ansible.builtin.template:
    src: 'kube-controller-manager.service.j2'
    dest: '/etc/systemd/system/kube-controller-manager.service'
    mode: '0644'
  notify:
    - cp-daemon-reload
    - controller-manager-restart

- name: Copy kube-scheduler config file
  ansible.builtin.copy:
    src: 'kube-scheduler.yaml'
    dest: '/etc/kubernetes/kube-scheduler.yaml'
    mode: '0644'
  notify:
    - scheduler-restart

- name: Copy kube-scheduler unit file
  ansible.builtin.template:
    src: 'kube-scheduler.service.j2'
    dest: '/etc/systemd/system/kube-scheduler.service'
    mode: '0644'
  notify:
    - cp-daemon-reload
    - scheduler-restart
    
- name: Install kube control-plane
  throttle: 1
  any_errors_fatal: true
  when: kube_installed_version.rc != 0 or kube_target_version is version(kube_installed_version.stdout_lines[0], '>', version_type='semver')
  block:
  
  - name: Stop control-plane services if installed
    ansible.builtin.systemd_service:
      name: "{{ item }}"
      state: stopped
    loop:
      - kube-apiserver
      - kube-controller-manager
      - kube-scheduler
    when: kube_installed_version.rc == 0 and kube_installed_version.stdout is defined

  - name: Copy kube bins to path
    ansible.builtin.copy:
      remote_src: true
      src: "{{ kube_base }}/{{ item }}-{{ kube_target_version }}"
      dest: "/usr/local/sbin/{{ item }}"
      mode: '0755'
    loop: "{{ kube_bins }}"
    notify:
      - apiserver-restart
      - controller-manager-restart
      - scheduler-restart

  - name: Flush handlers
    ansible.builtin.meta: flush_handlers
  
  - name: Get kube-apiserver endpoint health
    ansible.builtin.shell: |
      curl -k --cacert /var/lib/kubernetes/kube-api-server.crt https://127.0.0.1:6443/healthz
    register: kube_apiserver_health
    until: kube_apiserver_health.stdout is match('ok')
    retries: 10
    delay: 2
    
  - name: Get kube-controller-manager endpoint health
    ansible.builtin.shell: |
      curl -k --cacert /var/lib/kubernetes/kube-api-server.crt https://127.0.0.1:10257/healthz
    register: kube_controller_manager_health
    until: kube_controller_manager_health.stdout is match('ok')
    retries: 10
    delay: 2
    
  - name: Get kube-scheduler endpoint health
    ansible.builtin.shell: |
      curl -k --cacert /var/lib/kubernetes/kube-api-server.crt https://127.0.0.1:10259/healthz
    register: kube_scheduler_health
    until: kube_scheduler_health.stdout is match('ok')
    retries: 10
    delay: 2
    
  - name: Assert that all control plane endpoints are healthy
    ansible.builtin.assert:
      that:
        - kube_apiserver_health.stdout is match('ok')
        - kube_controller_manager_health.stdout is match('ok')
        - kube_scheduler_health.stdout is match('ok')
      fail_msg: "Control plane endpoints are not healthy"
      success_msg: "Control plane endpoints are healthy"
  
  - name: Get installed kube-apiserver version post-install
    ansible.builtin.shell: /usr/local/sbin/kube-apiserver --version | head -n1 | awk '{print $2}' | sed 's/^v//'
    register: kube_apiserver_postinstall_version
    ignore_errors: true
  
  - name: Assert that target version is installed
    ansible.builtin.assert:
      that: kube_apiserver_postinstall_version.stdout is search(kube_target_version)
      fail_msg: "kube-apiserver target version is not installed"
      success_msg: "kube-apiserver target version is installed"

- name: HAProxy
  tags:
    - ha
    - haproxy
  block:
    - name: Install haproxy
      ansible.builtin.dnf:
        name: haproxy
        state: present

    - name: Set HAProxy SELinux boolean
      ansible.posix.seboolean:
        name: haproxy_connect_any
        state: true
        persistent: true

    - name: Set ip_nonlocal_bind sysctl for keepalived vrrp
      ansible.posix.sysctl:
        name: net.ipv4.ip_nonlocal_bind
        value: '1'
        sysctl_set: true
        state: present
        reload: true

    - name: Copy haproxy config
      ansible.builtin.template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        mode: '0644'
      notify:
        - haproxy-restart

- name: Keepalived
  tags:
    - ka
    - keepalive
    - keepalived
  block:
    - name: Install keepalived
      ansible.builtin.dnf:
        name: keepalived
        state: present

    - name: Copy keepalived config
      ansible.builtin.template:
        src: keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
        mode: '0644'
      notify:
        - keepalived-restart

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
