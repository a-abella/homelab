---
apiVersion: v1
kind: ConfigMap
metadata:
  name: podsync-config
  namespace: downloaders
data:
  config.toml: |
    # Web server related configuration.
    [server]
    # HTTP server port.
    port = 8080
    # Optional. If you want to hide Podsync behind reverse proxy like nginx, you can use hostname field.
    # Server will be accessible from http://localhost:8080, but episode links will point to https://my.test.host:4443/ID1/XYZ
    hostname = "http://podsync.home.lan"
    # Bind a specific IP addresses for server ,"*": bind all IP addresses which is default option, localhost or 127.0.0.1  bind a single IPv4 address
    bind_address = "*"
    # Optional. Enable Web UI. Feeds have to be include in OPML file to appear (see below)
    web_ui = true

    # Configure where to store the episode data
    [storage]
      # Could be "local" (default) for the local file system, or "s3" for a S3-compatible storage provider (e.g. AWS S3)
      type = "local"

      [storage.local]
      data_dir = "/app/data" # Don't change if you run podsync via docker

    # The list of data sources to be hosted by Podsync.
    # These are channels, users, playlists, etc.
    [feeds]

      ##
      ## JENNY NICHOLSON
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.JennyNicholson]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/channel/UC7-E5xhZBZdW-8d7V80mzfg"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.JennyNicholson.custom]
        title = "Jenny Nicholson YT"
        description = "Listen to things you never cared about, for a long time."
        author = "Jenny Nicholson"
        cover_art = "https://yt3.googleusercontent.com/ytc/AIdro_kD06bCGtLZS_inAxRkowr-YzLavt_yLHMW10ZWOhQwxrE=s250-c-k-c0x00ffffff-no-rj"
        cover_art_quality = "high"
        category = "Pop Culture"
        subcategories = ["Arts & Entertainment", "Documentary"]
        explicit = false
        lang = "en"
        
      ##
      ## ASTROGOBLIN
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.astrogoblin]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/channel/UCRb4V8WHojbGqEvzL_9g03Q"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.astrogoblin.custom]
        title = "Astrogoblin YT"
        description = "Three jobless goblins in orbit above a dying earth."
        author = "Patrick Brown, Charlotte Avery, Jacob Fullterton"
        cover_art = "https://yt3.googleusercontent.com/9j_eYrMLkQvYXa1pEQAhGilReF87iqOCuhLEtDZfzpD9KNP_jL-2Da0OOu1tZcQ2q2JcuyFvGQ=s250-c-k-c0x00ffffff-no-rj"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["Pop Culture", "Video Games"]
        explicit = true
        lang = "en"


      ##
      ## FUNHAUS - Board as Hell
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.FunhausBoardAsHell]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLbIc1971kgPC2zmM3an1lcUZE6KCgWvNU"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.FunhausBoardAsHell.custom]
        title = "Funhaus - Board as Hell"
        description = "The future unemployed play board games."
        author = "James Willems"
        cover_art = "https://static.wikia.nocookie.net/roosterteeth/images/6/61/Board_as_Hell_logo.png/revision/latest/scale-to-width-down/500?cb=20190416210927"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["Games"]
        explicit = true
        lang = "en"


      ##
      ## FUNHAUS - Must Be Dice
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.FunhausMustBeDice]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLNmCpLLSK270u97rD-sWYISd3l0o9qvWI"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.FunhausMustBeDice.custom]
        title = "Funhaus - Must Be Dice"
        description = "Improv comedy and dragons."
        author = "Daniel Schneider"
        cover_art = "https://is1-ssl.mzstatic.com/image/thumb/Podcasts122/v4/2b/44/66/2b44668d-6823-1ca6-6527-ea0d4d74a10e/mza_10851661744797896186.jpeg/300x300bb.webp"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["Games"]
        explicit = true
        lang = "en"
        
      ##
      ## FUNHAUS - Deadly Premonition
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.FunhausDeadlyPremonition]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLbIc1971kgPBFGWn5FZ5pkAyQfQAfGsQe"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.

      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.FunhausDeadlyPremonition.custom]
        title = "Funhaus - Deadly Premonition"
        description = "Australia and a juggalo play a video game."
        author = "Alanah Pearce, Ryan Hailey"
        cover_art = "https://i.ytimg.com/vi/IxQwxOMkAvQ/maxresdefault.jpg"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["Video Games"]
        explicit = true
        lang = "en"
        
        
      ##
      ## RedLetterMedia - Best of the Worst
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.RLMBestOfTheWorst]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLJ_TJFLc25JR3VZ7Xe-cmt4k3bMKBZ5Tm"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.

      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.RLMBestOfTheWorst.custom]
        title = "RedLetterMedia - Best of the Worst"
        description = "Bad movie fun time."
        author = "Mike Stoklasa, Jay Bauman, Rich Evans"
        cover_art = "https://mediaproxy.tvtropes.org/width/1200/https://static.tvtropes.org/pmwiki/pub/images/botw_logo_larger.jpg"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["TV & Film"]
        explicit = true
        lang = "en"
        
      ##
      ## RedLetterMedia - re:View
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.RLMReview]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLJ_TJFLc25JSmtBkyIYqgD5KabbU57yzY"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.RLMReview.custom]
        title = "RedLetterMedia - re:View"
        description = "Dive deep on a thing."
        author = "Mike Stoklasa, Jay Bauman"
        cover_art = "https://m.media-amazon.com/images/M/MV5BMmI5YWYzYjgtOWJiYy00YjhiLTk0M2YtMTJhNGFiMjI3OWRmXkEyXkFqcGc@._V1_.jpg"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["TV & Film"]
        explicit = true
        lang = "en"
        
      ##
      ## RedLetterMedia - Beyond the Black Void
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.RLMBeyondTheBlackVoid]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLJ_TJFLc25JRdChhr9sp00ajl7FAeKDx-"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.

      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.RLMBeyondTheBlackVoid.custom]
        title = "RedLetterMedia - Beyond the Black Void"
        description = "Talking about mostly nothing."
        author = "Mike Stoklasa, Jay Bauman, Rich Evans"
        cover_art = "https://i.ytimg.com/vi/UeMadjM0ZZI/maxresdefault.jpg"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["TV & Film"]
        explicit = true
        lang = "en"
        
      ##
      ## RedLetterMedia - Trivia
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.RLMTrivia]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLJ_TJFLc25JT7feErb5uvWZ2iBlCZuPWJ"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.RLMTrivia.custom]
        title = "RedLetterMedia - Trivia"
        description = "The boys got bored I guess."
        author = "Mike Stoklasa, Jay Bauman, Rich Evans"
        cover_art = "https://images.squarespace-cdn.com/content/v1/5eadb6bb83439e0d77ee009b/1731967332282-YM6S7JNYWDICIBGGLA3Q/botw+trivia+thumbnail.jpg"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["TV & Film"]
        explicit = true
        lang = "en"


      ##
      ## Mr Plinkett - Star Wars Reviews
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.PlinkettStarWarsReviews]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLNmCpLLSK270KxTN6LMsfdCQRzft_HXUC"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.PlinkettStarWarsReviews.custom]
        title = "Mr Plinkett - Star Wars Reviews"
        description = "Mr. Plinkett performs an autopsy on Star Wars content."
        author = "Harry S. Plinkett"
        cover_art = "https://static1.squarespace.com/static/5eadb6bb83439e0d77ee009b/5eb6d16d30a3d7676786ee88/5eb6d6560f826758a39d6a48/1589040891329/MV5BZjA2NjIzY2UtNzc4Yi00ZTc4LThjZGYtYjJiNDkzOWUwODc2XkEyXkFqcGdeQXVyNjMxNzQ2NTQ%40._V1_.jpg?format=1500w"
        cover_art_quality = "high"
        category = "Comedy"
        subcategories = ["TV & Film"]
        explicit = true
        lang = "en"


      ##
      ## Kings and Generals - Alexander the Great
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.KingsAndGeneralsAlexanderTheGreat]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLaBYW76inbX5gW1dT5HvFcKUkrG5hvJPF"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.KingsAndGeneralsAlexanderTheGreat.custom]
        title = "Kings and Generals - Alexander the Great"
        description = "A comprehensive series on the life and campaigns of Alexander the Great."
        author = "Kings and Generals"
        cover_art = "https://i.ytimg.com/vi/XXK-vN1J61w/maxresdefault.jpg"
        cover_art_quality = "high"
        category = "History"
        subcategories = ["History"]
        explicit = false
        lang = "en"
        
      ##
      ## Kings and Generals - Caesar and Octavian
      ##
      # Each channel must have a unique identifier (in this example "ID1").
      [feeds.KingsAndGeneralsCaesarAndAugustus]
      # URL address of a channel, group, user, or playlist.
      url = "https://www.youtube.com/playlist?list=PLaBYW76inbX5qAsT-6CFBCnJKiIxGst69"
      # The number of episodes to query each update (keep in mind, that this might drain API token)
      page_size = 50
      # How often query for updates, examples: "60m", "4h", "2h45m"
      update_period = "1h"
      quality = "low" # "high" or "low"
      format = "custom" # "audio", "video" or "custom"
      # When format = "custom"
      # YouTubeDL format parameter and result file extension
      custom_format = { youtube_dl_format = "worstaudio[ext=m4a][format_note*=original]", extension = "m4a" }
      playlist_sort = "asc" # or "desc", which will fetch playlist items from the end
      # Optionally include this feed in OPML file (default value: false)
      opml = true
      # When set to true, podcasts indexers such as iTunes or Google Podcasts will not index this podcast
      private_feed = true

      # Optional Golang regexp format.
      # If set, then only download matching episodes.
      # Duration filters are in seconds.
      # max_age filter is in days.
      # min_age filter is in days.
      
      # exclude shorts
      filters = { min_duration = 300 }

      # Optional feed customizations
      [feeds.KingsAndGeneralsCaesarAndAugustus.custom]
        title = "Kings and Generals - Caesar and Augustus"
        description = "A comprehensive series on the life and campaigns of Julius Caesar and Augustus."
        author = "Kings and Generals"
        cover_art = "https://i.ytimg.com/vi/QFAofKwX2KM/maxresdefault.jpg"
        cover_art_quality = "high"
        category = "History"
        subcategories = ["History"]
        explicit = false
        lang = "en"
        


    # Podsync uses local database to store feeds and episodes metadata.
    # This section is optional and usually not needed to configure unless some very specific corner cases.
    # Refer to https://dgraph.io/docs/badger/get-started/#memory-usage for documentation.
    [database]
      badger = { truncate = true, file_io = true }

    # Youtube-dl specific configuration.
    [downloader]
    # Optional, auto update youtube-dl every 24 hours
    self_update = true
    # Download timeout in minutes.
    timeout = 15